name: Manual First Run

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker Image Tag'
        required: false
        default: 'latest'
      api_port:
        description: 'API Port'
        required: true
        default: '3000'
      name:
        description: 'Name parameter for POST request'
        required: true
      value:
        description: 'Value parameter for POST request'
        required: true

jobs:
  run-docker-image:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Pull Docker image from Docker Hub
      run: docker pull abhiraj860/sql-mongodb-node:${{ inputs.image_tag }}

    - name: Run Docker container
      run: |
        docker run --privileged -d -p ${{ inputs.api_port }}:${{ inputs.api_port }} --name my-container abhiraj860/sql-mongodb-node:${{ inputs.image_tag }} > container_logs.txt

    - name: Install curl
      run: sudo apt-get update && sudo apt-get install -y curl

    - name: Wait for the container to be ready
      run: |
        echo "Waiting for the container to be ready..."
        sleep 20

    - name: Check if container is running
      run: |
        if [ $(docker inspect -f '{{.State.Running}}' my-container) = "false" ]; then
          echo "Container is not running"
          exit 1
        fi

    - name: Check container logs
      run: |
        echo "Container logs:"
        docker logs my-container

    - name: Send POST request to the Node.js application
      run: |
        RESPONSE=$(curl -s -o response.txt -w "%{http_code}" -X POST http://localhost:${{ inputs.api_port }}/pull-and-run \
        -H "Content-Type: application/json" \
        -d '{"name": "${{ inputs.name }}", "value": "${{ inputs.value }}"}')
        echo "HTTP response code: $RESPONSE"
        cat response.txt

    - name: Stop and remove Docker container
      if: always()
      run: |
        docker stop my-container
        docker rm my-container

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: container-logs
        path: container_logs.txt
